/*Romeo for Edison Controller SKU: DFR0350
 * Adapted by SUTD 30.007 Grp17, Spring 2017
 * 
 * References:
 * https://www.dfrobot.com/wiki/index.php/Romeo_for_Edison_Controller_SKU:_DFR0350
 * http://robottini.altervista.org/linea-line-follower
 * Library Link (DFRobot_Intel_Edison V1.2): https://github.com/Arduinolibrary/DFRobot_Intel_Edison/raw/master/DFRobotEdison%20V1.2.zip
 * Take note it is V1.2, not V1.1(Outdated)
 */
#include <IIC1.h>

int sen1, sen2, sen3;
int state = 1;
/*State 1 is normal
//State 2 is turn left
//State 3 is turn right
State 4 is slowdown
State 5 is accelerated*/

void setup() {
  Serial.begin(9600);
}

void loop() {
  sen1 = analogRead(A0); /*Sensor 1 readings*/
  sen2 = analogRead(A1); /*Sensor 2 readings*/
  sen3 = analogRead(A2); /*Sensor 3 readings*/

  /*============================================
   * ===========================================
   * Logic Runs
   * ===========================================
   =============================================*/

   if (500 < sen1) { /*Black lines cover middle sensors exactly, go straight*/
    state = 1;
   } else if (sen1 <400) { /*Black lines partially covers middle sensors, changes are happening*/
    if (300 < sen2 < 400) { /*Black lines partially covers left sensors, turn left*/
      state = 2;
    } else if (300 < sen3 < 400) { /*Black lines partially covers right sensors, turn right */
      state = 3;
    } else { /*Black lines don't detect any sensors, accelerate away, on dotted lines*/
      state = 5;
    }
   }

  /*============================================
   * ===========================================
   * Motion Change
   * ===========================================
   =============================================*/

  /*PID Control*/
  int Kp = 120; /*Proportional Gain*/
  int Ki = 100; /*Integral Gain*/
  int Kd = 100; /*Derivative Gain*/
  float currentPosition;
  int lastPosition;
  int prime = 0;
  float integral = 0;
  /*unsigned long lastLoopTime;
  unsigned long now = millis();
  float timeDiff = (float)(now - LastLoopTime);*/
  /*Proportional Parameter*/
  int P = currentPosition * Kp/1000;
  /*Integral Parameter*/
  integral += currentPosition;
  int I = integral * Ki/1000;
  /*Derivative Parameter*/
  float derivative = currentPosition - lastPosition;
  if (prime == 0) { /*If first time move, set derivative to zero*/
    prime = 1;
    derivative = 0;
  }
  int D = derivative * Kd/1000;
  /*Save Values*/
  lastPosition = currentPosition;
  int PID = P + I + D;

  /*Information from Romeo*/
  Serial.print("P:"+P);
  Serial.print("I:"+I);
  Serial.print("D:"+D);

  const int maximum = 100;
  switch (state) {
    case 1:
      if (PID > 0) {
        if (PID > maximum) PID = maximum;
        Serial.print("Motor1:"+maximum);
        Serial.print("Motor2:"+maximum-PID);
        Mot1.setDirection(CLOCKWISE); /*Motor1 anticlockwise rotation*/
        Mot1.setSpeed(maximum); /*Moto1 speed */
        Mot2.setDirection(CLOCKWISE);
        Mot2.setSpeed(maximum-PID);
      } else {
        if (PID < -maximum) PID = -maximum;
        Serial.print("Motor1:"+maximum+PID);
        Serial.print("Motor2:"+maximum);
        Mot1.setDirection(CLOCKWISE); /*Motor1 anticlockwise rotation*/
        Mot1.setSpeed(maximum+PID); /*Moto1 speed */
        Mot2.setDirection(ANTICLOCKWISE);
        Mot2.setSpeed(maximum);
      }
      break;
    case 2:
      break;
    default:
      break;
   }
   
}
